1
00:00:00,006 --> 00:00:03,005
- Alright, let's get down into the details a bit more

2
00:00:03,005 --> 00:00:07,008
about what each box in our system is, how it gets created,

3
00:00:07,008 --> 00:00:09,007
and how it stays up to date.

4
00:00:09,007 --> 00:00:13,003
By box, we mean the individual running system,

5
00:00:13,003 --> 00:00:16,002
whether it's hardware, a virtual machine,

6
00:00:16,002 --> 00:00:18,007
a cloud instance, or a container.

7
00:00:18,007 --> 00:00:19,005
First, we'll start

8
00:00:19,005 --> 00:00:21,006
with defining a few key terms to help us think

9
00:00:21,006 --> 00:00:23,008
about our boxes and our system,

10
00:00:23,008 --> 00:00:25,009
and how they're configured to run both initially

11
00:00:25,009 --> 00:00:27,002
and over time.

12
00:00:27,002 --> 00:00:31,008
This process is generally known as configuration management.

13
00:00:31,008 --> 00:00:34,007
Provisioning is the process of making a server or node ready

14
00:00:34,007 --> 00:00:37,005
for operation, including installing the OS,

15
00:00:37,005 --> 00:00:38,005
system services,

16
00:00:38,005 --> 00:00:41,001
and establishing network connectivity.

17
00:00:41,001 --> 00:00:43,007
Deployment is the process of deploying

18
00:00:43,007 --> 00:00:46,003
and upgrading applications on a server.

19
00:00:46,003 --> 00:00:49,002
Now, these two terms are mainly different

20
00:00:49,002 --> 00:00:51,000
for historical reasons.

21
00:00:51,000 --> 00:00:52,008
You know, like a developer, they might only think

22
00:00:52,008 --> 00:00:55,005
about deploying an application and its APIs,

23
00:00:55,005 --> 00:00:57,008
and an operations engineer is, you know, worried

24
00:00:57,008 --> 00:01:00,006
about provisioning the OS and the network components.

25
00:01:00,006 --> 00:01:03,000
But consider if you're using version code

26
00:01:03,000 --> 00:01:04,006
for your infrastructure,

27
00:01:04,006 --> 00:01:07,006
and version infrastructure for your applications,

28
00:01:07,006 --> 00:01:11,003
you can use many of the same tools to roll out both.

29
00:01:11,003 --> 00:01:13,009
Configuration management tools like Chef

30
00:01:13,009 --> 00:01:17,001
and Puppet can make both operating system-level changes

31
00:01:17,001 --> 00:01:21,000
and deploy applications using the same semantics.

32
00:01:21,000 --> 00:01:22,001
You can even drive both

33
00:01:22,001 --> 00:01:24,004
of them out of the same build system.

34
00:01:24,004 --> 00:01:25,003
Here's an example

35
00:01:25,003 --> 00:01:28,002
of a chef recipe to install a standard OS package

36
00:01:28,002 --> 00:01:30,003
for the Apache 2 web server.

37
00:01:30,003 --> 00:01:32,009
It's smart enough to understand which package to use

38
00:01:32,009 --> 00:01:37,004
on RPM-based systems and which to use on Yum-based systems.

39
00:01:37,004 --> 00:01:40,003
You just have Chef run on a node and it'll check to see

40
00:01:40,003 --> 00:01:44,003
if the package exists and, if not, it'll install it.

41
00:01:44,003 --> 00:01:47,008
And then here's a Chef recipe to install an application.

42
00:01:47,008 --> 00:01:50,001
In this case, the golang cloud generator

43
00:01:50,001 --> 00:01:51,002
that we wrote.

44
00:01:51,002 --> 00:01:54,001
It downloads a zip file from the application

45
00:01:54,001 --> 00:01:57,004
from our Nexus artifact repository, unzips it,

46
00:01:57,004 --> 00:01:58,007
and runs it.

47
00:01:58,007 --> 00:02:02,002
In this way, you can use code to do all the OS, network,

48
00:02:02,002 --> 00:02:04,009
and security, application configuration,

49
00:02:04,009 --> 00:02:05,009
everything that you need

50
00:02:05,009 --> 00:02:07,009
for a base operating system to get all the way

51
00:02:07,009 --> 00:02:10,006
to a fully configured and working server

52
00:02:10,006 --> 00:02:13,000
without all the manual steps.

53
00:02:13,000 --> 00:02:15,007
Infrastructure and services need to be managed

54
00:02:15,007 --> 00:02:18,000
after their initial creation, of course.

55
00:02:18,000 --> 00:02:20,004
Initial provisioning and deployment is great,

56
00:02:20,004 --> 00:02:23,000
but being able to control and upgrade a running system,

57
00:02:23,000 --> 00:02:25,002
that's also critical.

58
00:02:25,002 --> 00:02:27,009
This includes detecting whether the system is really working

59
00:02:27,009 --> 00:02:30,001
in the state you desired, or if it's broken

60
00:02:30,001 --> 00:02:33,008
from a manual change, a runtime error or something

61
00:02:33,008 --> 00:02:37,001
in the cloud provider, and you want to be able to roll

62
00:02:37,001 --> 00:02:39,008
out new versions and changes the same way you initially

63
00:02:39,008 --> 00:02:41,004
provisioned your system.

64
00:02:41,004 --> 00:02:46,004
This brings us to another important concept: orchestration.

65
00:02:46,004 --> 00:02:48,003
Orchestration is the act of performing

66
00:02:48,003 --> 00:02:52,001
coordinated operations across multiple systems.

67
00:02:52,001 --> 00:02:54,008
Once a system is running, it can be disruptive

68
00:02:54,008 --> 00:02:56,008
to update it while it's in use.

69
00:02:56,008 --> 00:02:58,008
An orchestration system keeps a registry

70
00:02:58,008 --> 00:03:00,003
of the systems you're running

71
00:03:00,003 --> 00:03:02,004
and allows you to coordinate deployments.

72
00:03:02,004 --> 00:03:03,005
For example,

73
00:03:03,005 --> 00:03:05,009
by draining web connections and then taking a server out

74
00:03:05,009 --> 00:03:08,007
of a load balancer while you upgrade its application version

75
00:03:08,007 --> 00:03:11,004
and then putting it back into service,

76
00:03:11,004 --> 00:03:14,002
then you can repeat the process with the other servers.

77
00:03:14,002 --> 00:03:16,008
The point is that the orchestration system needs

78
00:03:16,008 --> 00:03:19,008
to give you ability to roll out changes of any type

79
00:03:19,008 --> 00:03:23,001
while minimizing downtime and customer disruption.

80
00:03:23,001 --> 00:03:24,006
Tools like Ansible

81
00:03:24,006 --> 00:03:27,002
and Rundeck let you construct workflows to operate

82
00:03:27,002 --> 00:03:30,000
on your system in an orchestrated manner.

83
00:03:30,000 --> 00:03:33,007
And newer tools like Kubernetes promote different models

84
00:03:33,007 --> 00:03:35,009
of orchestrated deployments with containers.

85
00:03:35,009 --> 00:03:37,003
Now these are the building blocks

86
00:03:37,003 --> 00:03:41,003
of configuration management using infrastructure as code.

87
00:03:41,003 --> 00:03:45,002
But you may already be wondering how exactly to use them.

88
00:03:45,002 --> 00:03:47,007
You know, which tools to use, when to use them,

89
00:03:47,007 --> 00:03:50,000
and if you should think of your system

90
00:03:50,000 --> 00:03:53,008
as long-running boxes where changes are applied in place

91
00:03:53,008 --> 00:03:57,000
or replace the boxes for each deployment.

92
00:03:57,000 --> 00:03:59,004
Now, this is a great question,

93
00:03:59,004 --> 00:04:01,005
and there are reasons why you would choose one approach

94
00:04:01,005 --> 00:04:03,000
over the other, and we'll cover

95
00:04:03,000 --> 00:04:05,000
that in detail in the next two videos.

