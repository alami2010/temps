1
00:00:00,000 --> 00:00:02,003
- I don't get the big deal about containers.

2
00:00:02,003 --> 00:00:05,004
They're just slightly lighter Vms, right?

3
00:00:05,004 --> 00:00:06,004
The cloud already lets us

4
00:00:06,004 --> 00:00:08,002
spin up all the VMs we want dynamically.

5
00:00:08,002 --> 00:00:11,006
- Well, actually, that's true, but--

6
00:00:11,006 --> 00:00:14,006
- [Speaker] VMs versus containers, fight.

7
00:00:14,006 --> 00:00:16,004
- Do you mind?

8
00:00:16,004 --> 00:00:17,009
Anyway, that's true.

9
00:00:17,009 --> 00:00:21,003
But servers, even cloud Vms, only come in fixed sizes,

10
00:00:21,003 --> 00:00:24,000
and are slow to build and provision.

11
00:00:24,000 --> 00:00:25,009
Containers build and run much more quickly,

12
00:00:25,009 --> 00:00:28,001
and use less overhead when they do.

13
00:00:28,001 --> 00:00:31,009
- Right, but that doesn't sound like that big of a deal.

14
00:00:31,009 --> 00:00:35,002
I only build my servers once, and then they're done.

15
00:00:35,002 --> 00:00:37,005
Who cares if it takes 10 minutes or one minute?

16
00:00:37,005 --> 00:00:39,000
- That's what I thought

17
00:00:39,000 --> 00:00:41,005
when I first had Docker explained to me, too.

18
00:00:41,005 --> 00:00:43,004
The operational benefits are there,

19
00:00:43,004 --> 00:00:45,000
but they're not super compelling

20
00:00:45,000 --> 00:00:46,006
when compared one to one with a VM.

21
00:00:46,006 --> 00:00:48,003
But it's not about one to one.

22
00:00:48,003 --> 00:00:51,002
Like with moving to cloud from data centers,

23
00:00:51,002 --> 00:00:53,008
it's the ability to use greater ephemerality

24
00:00:53,008 --> 00:00:56,000
that really makes the difference.

25
00:00:56,000 --> 00:00:59,002
- Okay, now hold on there, Mr. Big Words.

26
00:00:59,002 --> 00:01:00,008
I'm from Texas.

27
00:01:00,008 --> 00:01:02,007
What do you mean, ephemerality?

28
00:01:02,007 --> 00:01:04,006
- Well, the old model

29
00:01:04,006 --> 00:01:06,004
is that you carefully construct servers

30
00:01:06,004 --> 00:01:09,003
in order to run a bunch of applications on them.

31
00:01:09,003 --> 00:01:11,000
And then you have a whole world of hurt

32
00:01:11,000 --> 00:01:12,009
from conflicting configurations,

33
00:01:12,009 --> 00:01:14,007
maintenance schedules, and so on.

34
00:01:14,007 --> 00:01:17,000
Containers separate that out,

35
00:01:17,000 --> 00:01:19,007
so each application has just the environment it needs.

36
00:01:19,007 --> 00:01:22,004
So you avoid version conflicts with things

37
00:01:22,004 --> 00:01:24,007
like Java, Python run times, and other dependencies.

38
00:01:24,007 --> 00:01:28,006
- Okay, but if you have a thousand containers

39
00:01:28,006 --> 00:01:29,008
instead of a hundred servers,

40
00:01:29,008 --> 00:01:32,001
isn't that just 10 times the maintenance burden?

41
00:01:32,001 --> 00:01:34,006
- No, because container architectures

42
00:01:34,006 --> 00:01:36,009
pressure you to run them for a short time,

43
00:01:36,009 --> 00:01:39,005
like one piece of a workload, and then kill them.

44
00:01:39,005 --> 00:01:41,002
They're intended to be read only,

45
00:01:41,002 --> 00:01:44,004
no updates or SSHing into them or anything.

46
00:01:44,004 --> 00:01:47,002
You can think of them as much as thick processes

47
00:01:47,002 --> 00:01:48,006
than thin servers.

48
00:01:48,006 --> 00:01:51,008
In the DevOps world, we often refer to the move

49
00:01:51,008 --> 00:01:55,003
to standardized servers as cattle, not pets.

50
00:01:55,003 --> 00:01:56,009
Using that same analogy,

51
00:01:56,009 --> 00:02:00,002
you can think of a container as a specific packaged steak.

52
00:02:00,002 --> 00:02:02,007
Hmm, steak.

53
00:02:02,007 --> 00:02:04,003
- Hmm, okay, steak.

54
00:02:04,003 --> 00:02:07,002
Now, now, now you're talking Texan.

55
00:02:07,002 --> 00:02:09,000
So what you're saying is there's less

56
00:02:09,000 --> 00:02:10,003
of an opportunity to drift,

57
00:02:10,003 --> 00:02:12,000
but you still need to update them

58
00:02:12,000 --> 00:02:14,002
for security patches and all that stuff, right?

59
00:02:14,002 --> 00:02:17,001
- Sure, but because the beauty of Docker

60
00:02:17,001 --> 00:02:19,004
is that each container is intended to be one service,

61
00:02:19,004 --> 00:02:21,009
one or a very small number of processes.

62
00:02:21,009 --> 00:02:25,008
With a minimal system environment customized to itself,

63
00:02:25,008 --> 00:02:27,004
they're often not running an entire

64
00:02:27,004 --> 00:02:29,008
traditional operating system in the container.

65
00:02:29,008 --> 00:02:32,004
- Okay, so there's less surface area.

66
00:02:32,004 --> 00:02:35,000
- Right, and since they build quickly,

67
00:02:35,000 --> 00:02:37,003
Docker-based build pipelines

68
00:02:37,003 --> 00:02:39,001
integrate the base container build

69
00:02:39,001 --> 00:02:42,001
with the application build in the same pipeline.

70
00:02:42,001 --> 00:02:44,000
Individual container images are immutable,

71
00:02:44,000 --> 00:02:46,003
and not intended to be changed,

72
00:02:46,003 --> 00:02:47,008
just new versions built

73
00:02:47,008 --> 00:02:51,002
whenever you need a patch system or application.

74
00:02:51,002 --> 00:02:53,004
- Okay, but doesn't that expose the sanctity

75
00:02:53,004 --> 00:02:54,009
of my operating system configuration

76
00:02:54,009 --> 00:02:57,008
to the, I hate to say it, developers?

77
00:02:57,008 --> 00:03:01,005
I mean, my inner sys admin says that's a bad thing.

78
00:03:01,005 --> 00:03:03,009
- Yes, but it's really a good thing.

79
00:03:03,009 --> 00:03:06,002
Traditional system administration

80
00:03:06,002 --> 00:03:07,007
relied on one set of people

81
00:03:07,007 --> 00:03:10,000
carefully configuring the systems,

82
00:03:10,000 --> 00:03:11,005
and another the applications.

83
00:03:11,005 --> 00:03:14,002
'Cause one day, somebody heard the phrase,

84
00:03:14,002 --> 00:03:16,009
separation of duties, skipped reading the definition,

85
00:03:16,009 --> 00:03:18,007
and decided that was the way to do it.

86
00:03:18,007 --> 00:03:21,002
- Oh, snap.

87
00:03:21,002 --> 00:03:23,000
- But the real power of containers

88
00:03:23,000 --> 00:03:25,000
is that they greatly accelerate

89
00:03:25,000 --> 00:03:26,005
the feedback loop for developers.

90
00:03:26,005 --> 00:03:29,005
Developers can run the identical container

91
00:03:29,005 --> 00:03:32,001
easily on their desktop, on test systems,

92
00:03:32,001 --> 00:03:33,007
and on production systems.

93
00:03:33,007 --> 00:03:35,008
This finds integration problems early,

94
00:03:35,008 --> 00:03:38,000
and speeds up the whole development cycle.

95
00:03:38,000 --> 00:03:40,003
- Okay, of course, separation of duties

96
00:03:40,003 --> 00:03:43,000
doesn't mean one person does systems,

97
00:03:43,000 --> 00:03:44,004
and another does apps.

98
00:03:44,004 --> 00:03:46,000
But it does mean that no single person

99
00:03:46,000 --> 00:03:49,005
should have full control over something that's important.

100
00:03:49,005 --> 00:03:51,000
And so doesn't this violate that?

101
00:03:51,000 --> 00:03:52,007
- Well, the great thing

102
00:03:52,007 --> 00:03:55,001
about container-based development workflows,

103
00:03:55,001 --> 00:03:57,003
spoiler alert for later in the course,

104
00:03:57,003 --> 00:03:59,003
is they can leverage the safeguards

105
00:03:59,003 --> 00:04:01,000
of a well-designed build pipeline.

106
00:04:01,000 --> 00:04:04,000
That means peer reviews to ensure separation of duties,

107
00:04:04,000 --> 00:04:06,003
as well as automated testing,

108
00:04:06,003 --> 00:04:09,009
functional security and so on, in a single integrated,

109
00:04:09,009 --> 00:04:11,002
not siloed way.

110
00:04:11,002 --> 00:04:12,007
- Okay, that sounds good.

111
00:04:12,007 --> 00:04:15,004
But what if I said there was something

112
00:04:15,004 --> 00:04:17,007
even better than containers For that?

113
00:04:17,007 --> 00:04:19,002
You'll have to join me in my next video

114
00:04:19,002 --> 00:04:21,000
to find out what it is.

