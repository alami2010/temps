1
00:00:00,005 --> 00:00:02,005
- [Narrator] Now it's time to look at Docker.

2
00:00:02,005 --> 00:00:05,001
As we've talked about, Docker containers can be thought of

3
00:00:05,001 --> 00:00:07,007
as Micro VMs and they package all the software

4
00:00:07,007 --> 00:00:10,005
and application needs to run and nothing else,

5
00:00:10,005 --> 00:00:13,006
or at least that's the promise of it.

6
00:00:13,006 --> 00:00:16,002
Well, let's start with a look at Docker Desktop.

7
00:00:16,002 --> 00:00:17,004
Notice on the left hand side,

8
00:00:17,004 --> 00:00:19,008
we have containers, images, and volumes.

9
00:00:19,008 --> 00:00:22,008
I'm clicking into images first and we don't have any images

10
00:00:22,008 --> 00:00:24,002
available at the moment.

11
00:00:24,002 --> 00:00:26,004
We need an image to be able to run a container

12
00:00:26,004 --> 00:00:27,005
from that image.

13
00:00:27,005 --> 00:00:29,008
So let's leave the desktop view and head on over

14
00:00:29,008 --> 00:00:32,005
to the command line and make our image.

15
00:00:32,005 --> 00:00:35,009
Now I'm in the Word-cloud generator GitHub repository

16
00:00:35,009 --> 00:00:37,002
which is a GitHub repo

17
00:00:37,002 --> 00:00:39,004
and features a Go Lang web application

18
00:00:39,004 --> 00:00:41,009
I wrote for the LinkedIn Learning classes.

19
00:00:41,009 --> 00:00:44,000
It takes text and turns it into,

20
00:00:44,000 --> 00:00:45,009
you guessed it, a word-cloud.

21
00:00:45,009 --> 00:00:46,007
In a few minutes,

22
00:00:46,007 --> 00:00:48,008
we'll take a look at that, but for this video,

23
00:00:48,008 --> 00:00:51,005
we're putting word-cloud generator into a docker container

24
00:00:51,005 --> 00:00:53,004
and then when the container gets run,

25
00:00:53,004 --> 00:00:55,005
it will execute the application.

26
00:00:55,005 --> 00:00:56,009
Before we build our image,

27
00:00:56,009 --> 00:00:59,005
let's look at how a Docker container gets built.

28
00:00:59,005 --> 00:01:02,002
I'm opening up the project's MakeFile in Vim.

29
00:01:02,002 --> 00:01:07,001
I'm typing Vim MakeFile.

30
00:01:07,001 --> 00:01:09,005
There's an entry named Docker-Build.

31
00:01:09,005 --> 00:01:14,006
In it, it has Build, Docker-build-Mac, and Docker-build-amd.

32
00:01:14,006 --> 00:01:17,001
The one system dependency you have to remember

33
00:01:17,001 --> 00:01:19,003
is the underlying architecture of the box,

34
00:01:19,003 --> 00:01:21,006
like Intel or ARM and so on.

35
00:01:21,006 --> 00:01:23,001
I'm building on an M2 Mac

36
00:01:23,001 --> 00:01:25,007
which uses an ARM 64 architecture

37
00:01:25,007 --> 00:01:30,003
but most servers are Intel or AMD based, which is AMD 64.

38
00:01:30,003 --> 00:01:32,001
So we can use this Docker container

39
00:01:32,001 --> 00:01:33,005
in Earnest Kubernetes cluster.

40
00:01:33,005 --> 00:01:37,001
In the next video, we'll use the Buildx Cross Architecture

41
00:01:37,001 --> 00:01:41,001
build tool to build it for AMD64 as well.

42
00:01:41,001 --> 00:01:43,007
So let's get back to the build, it first runs build

43
00:01:43,007 --> 00:01:45,009
before doing any Docker steps.

44
00:01:45,009 --> 00:01:50,003
It runs for Linux, Windows, and Mac.

45
00:01:50,003 --> 00:01:54,000
Once we have our artifact for the word-cloud generator app,

46
00:01:54,000 --> 00:01:56,000
now we have to put it inside of a container.

47
00:01:56,000 --> 00:01:58,009
For this, we'll be using Docker-build-Mac.

48
00:01:58,009 --> 00:02:02,008
Docker-Build tells it which Docker file to look for.

49
00:02:02,008 --> 00:02:04,005
It gives it a few tags

50
00:02:04,005 --> 00:02:06,007
and then it looks in the local directory.

51
00:02:06,007 --> 00:02:07,009
So let's open up

52
00:02:07,009 --> 00:02:11,008
that Docker file and understand what it's doing.

53
00:02:11,008 --> 00:02:15,000
I'm typing vim Dockerfile.

54
00:02:15,000 --> 00:02:17,002
It starts with an Alpine Linux container,

55
00:02:17,002 --> 00:02:19,006
which is a very lightweight Docker container,

56
00:02:19,006 --> 00:02:22,002
which is roughly five megabytes in size.

57
00:02:22,002 --> 00:02:24,002
That's awesome for us.

58
00:02:24,002 --> 00:02:26,009
Next, it copies in our application artifact,

59
00:02:26,009 --> 00:02:28,003
the word-cloud generator app

60
00:02:28,003 --> 00:02:31,004
and it puts it in the op directory.

61
00:02:31,004 --> 00:02:33,009
Next, it exposes a port

62
00:02:33,009 --> 00:02:37,000
and then it has this command here entry point.

63
00:02:37,000 --> 00:02:39,004
The entry point command specifies what is run

64
00:02:39,004 --> 00:02:41,003
after the container is initiated.

65
00:02:41,003 --> 00:02:42,007
This format is pretty standard

66
00:02:42,007 --> 00:02:45,008
for a containerized application with a single purpose.

67
00:02:45,008 --> 00:02:48,006
Okay, so let's just build it and I'm going to run

68
00:02:48,006 --> 00:02:53,007
make Docker-Build.

69
00:02:53,007 --> 00:02:55,000
Okay, that built my app

70
00:02:55,000 --> 00:02:58,000
and made a new Docker image and put it inside of it.

71
00:02:58,000 --> 00:03:00,001
Let's go back to Docker Desktop

72
00:03:00,001 --> 00:03:02,006
and we can see our images that were created.

73
00:03:02,006 --> 00:03:05,008
Notice there's only 12 megabytes in size.

74
00:03:05,008 --> 00:03:07,002
Okay, so that's everything we need.

75
00:03:07,002 --> 00:03:08,004
It's got the OS, the app.

76
00:03:08,004 --> 00:03:11,004
That's everything we need to run in that small container.

77
00:03:11,004 --> 00:03:14,000
It's pretty cool and it's very lightweight.

78
00:03:14,000 --> 00:03:15,006
Now, I could run it right from the desktop

79
00:03:15,006 --> 00:03:18,002
but let's go back to the command line again.

80
00:03:18,002 --> 00:03:20,006
In my make file, I have Make-Docker-Run.

81
00:03:20,006 --> 00:03:24,006
I'm going to call that right now.

82
00:03:24,006 --> 00:03:26,006
Okay, so notice what it did here.

83
00:03:26,006 --> 00:03:29,003
It started Docker and it put it on port 8888

84
00:03:29,003 --> 00:03:31,006
and it mapped that port externally for that.

85
00:03:31,006 --> 00:03:34,007
We can go see that in Docker Desktop again.

86
00:03:34,007 --> 00:03:36,005
Okay, look, there's our container.

87
00:03:36,005 --> 00:03:37,004
We can see it running.

88
00:03:37,004 --> 00:03:38,008
It's running on port 8888.

89
00:03:38,008 --> 00:03:41,001
Let's check it out.

90
00:03:41,001 --> 00:03:44,005
Okay, we're on local hosts, port 8888

91
00:03:44,005 --> 00:03:48,000
and I'm going to go ahead and paste in a few hundred words

92
00:03:48,000 --> 00:03:49,006
from the Lorem Ipsum text generator

93
00:03:49,006 --> 00:03:57,003
and let Word-cloud generator just do its thing.

94
00:03:57,003 --> 00:03:58,007
Okay, great, it's all working.

95
00:03:58,007 --> 00:03:59,008
Now we have our application.

96
00:03:59,008 --> 00:04:01,008
It's in a container, it's running locally,

97
00:04:01,008 --> 00:04:04,004
everything's good, but we want to share our image

98
00:04:04,004 --> 00:04:05,008
with other people.

99
00:04:05,008 --> 00:04:10,000
So let's go back to the command line and let's do just that.

100
00:04:10,000 --> 00:04:12,008
I have another entry in my make file called Docker Push.

101
00:04:12,008 --> 00:04:15,008
That puts the image that we made into Docker Hub,

102
00:04:15,008 --> 00:04:17,004
which is a public docker registry that people can use

103
00:04:17,004 --> 00:04:18,006
to share images.

104
00:04:18,006 --> 00:04:20,008
As we mentioned earlier, we'll push both the Mac

105
00:04:20,008 --> 00:04:23,005
and the Intel based images so we can use them

106
00:04:23,005 --> 00:04:25,007
in multiple architectures.

107
00:04:25,007 --> 00:04:32,006
So I'm going to type in make Docker-push.

108
00:04:32,006 --> 00:04:34,005
Okay, great, got all the Docker containers pushed up there.

109
00:04:34,005 --> 00:04:36,005
Let's go take a look at Docker Hub.

110
00:04:36,005 --> 00:04:38,007
So I'm on Docker Hub and I can see all the containers

111
00:04:38,007 --> 00:04:40,006
that just got pushed up.

112
00:04:40,006 --> 00:04:42,009
And this is the admin interface since I own it

113
00:04:42,009 --> 00:04:49,004
and we can see what it looks like to the public.

114
00:04:49,004 --> 00:04:51,000
And here are the containers that would look like

115
00:04:51,000 --> 00:04:54,000
for someone that wanted to download it.

116
00:04:54,000 --> 00:04:55,004
So let's recap.

117
00:04:55,004 --> 00:04:57,009
We have our web application bundled in a very small

118
00:04:57,009 --> 00:05:01,001
Linux container that is invoked on startup and runs.

119
00:05:01,001 --> 00:05:02,009
We then told Docker to run that image

120
00:05:02,009 --> 00:05:04,001
and bind it to a high port

121
00:05:04,001 --> 00:05:06,008
and then we ran against it and saw it in the browser,

122
00:05:06,008 --> 00:05:09,002
but it's ephemeral and we could have just run a script

123
00:05:09,002 --> 00:05:11,007
or a task and then asked it to exit.

124
00:05:11,007 --> 00:05:13,002
Well, we forced it to stick around

125
00:05:13,002 --> 00:05:15,000
and wait until we were done with it

126
00:05:15,000 --> 00:05:17,004
because we're using it as a web application.

127
00:05:17,004 --> 00:05:21,000
Then we shared our container with the world on Docker Hub.

128
00:05:21,000 --> 00:05:25,000
Okay, that's a quick tour of what you can do with Docker.

