1
00:00:00,006 --> 00:00:02,001
- Now I know what you're saying.

2
00:00:02,001 --> 00:00:04,006
Cloud is so early-2000s.

3
00:00:04,006 --> 00:00:06,006
Containers are all the buzz right now,

4
00:00:06,006 --> 00:00:09,001
and they're a fundamental empowering technology

5
00:00:09,001 --> 00:00:11,004
for infrastructure as code.

6
00:00:11,004 --> 00:00:14,006
So what is a container, you may ask?

7
00:00:14,006 --> 00:00:17,004
It's a lightweight, executable unit of software

8
00:00:17,004 --> 00:00:20,009
that packs up a system environment, application code,

9
00:00:20,009 --> 00:00:23,009
and dependencies such as binaries, libraries,

10
00:00:23,009 --> 00:00:26,007
and configuration files for easy deployment

11
00:00:26,007 --> 00:00:29,006
across different computing environments.

12
00:00:29,006 --> 00:00:31,008
In other words, it's basically a way to run

13
00:00:31,008 --> 00:00:36,006
segmented mini systems on your Linux or Windows host system.

14
00:00:36,006 --> 00:00:39,006
I know, I know that sounds like a virtual machine,

15
00:00:39,006 --> 00:00:42,003
but containers only virtualize down to the level

16
00:00:42,003 --> 00:00:44,005
above the core operating system ,

17
00:00:44,005 --> 00:00:48,003
while VMs virtualize all the way down to the hypervisor.

18
00:00:48,003 --> 00:00:51,000
Because containers share the system's kernel,

19
00:00:51,000 --> 00:00:53,000
they boot fast and are more lightweight

20
00:00:53,000 --> 00:00:55,001
than a traditional virtual machine,

21
00:00:55,001 --> 00:00:58,002
but they do provide isolation so you can install packages

22
00:00:58,002 --> 00:01:02,001
and do system configuration restricted to the container.

23
00:01:02,001 --> 00:01:04,005
In other words, they look like separate systems,

24
00:01:04,005 --> 00:01:07,003
for most purposes, from inside them.

25
00:01:07,003 --> 00:01:09,006
In fact, you don't need an operating system

26
00:01:09,006 --> 00:01:10,008
in your container.

27
00:01:10,008 --> 00:01:13,009
Since it uses the underlying POSIX OS of the server,

28
00:01:13,009 --> 00:01:15,007
a container can just have, say,

29
00:01:15,007 --> 00:01:18,009
a Golang or Python interpreter as its base layer

30
00:01:18,009 --> 00:01:20,008
and be very slim.

31
00:01:20,008 --> 00:01:23,006
Docker's the most popular container technology,

32
00:01:23,006 --> 00:01:26,003
but there are others like CoreOS rkt,

33
00:01:26,003 --> 00:01:30,002
containerd, and Red Hat CRI-O.

34
00:01:30,002 --> 00:01:32,007
You create the container images that they use

35
00:01:32,007 --> 00:01:34,003
in a code-like way.

36
00:01:34,003 --> 00:01:37,003
Docker uses a build file called a Dockerfile.

37
00:01:37,003 --> 00:01:38,007
Here is an example.

38
00:01:38,007 --> 00:01:42,000
You just docker build this, and it starts by taking

39
00:01:42,000 --> 00:01:45,002
the latest Ubuntu base container off Docker Hub,

40
00:01:45,002 --> 00:01:47,007
which is a central Docker image repository

41
00:01:47,007 --> 00:01:50,003
with community contributed images.

42
00:01:50,003 --> 00:01:52,006
Then it downloads, installs, and runs

43
00:01:52,006 --> 00:01:54,004
the NGINX web server on it

44
00:01:54,004 --> 00:01:58,001
and opens up port 80 to the outside network.

45
00:01:58,001 --> 00:02:00,008
The result is a Docker image you can run at will,

46
00:02:00,008 --> 00:02:03,001
and every run of it generates a new container

47
00:02:03,001 --> 00:02:04,008
running a web server.

48
00:02:04,008 --> 00:02:06,001
You can then upload the image

49
00:02:06,001 --> 00:02:08,003
to a container image repository

50
00:02:08,003 --> 00:02:10,007
to be pulled down and used by developers

51
00:02:10,007 --> 00:02:13,002
and by production systems.

52
00:02:13,002 --> 00:02:15,008
The popular open source system, Kubernetes,

53
00:02:15,008 --> 00:02:19,004
orchestrates containers en masse across multiple servers

54
00:02:19,004 --> 00:02:21,006
to form a whole networked architecture

55
00:02:21,006 --> 00:02:25,008
of many small services cooperating to form applications.

56
00:02:25,008 --> 00:02:28,008
Here's an example: complex Kubernetes system

57
00:02:28,008 --> 00:02:30,009
with relatively small pieces of code,

58
00:02:30,009 --> 00:02:33,000
also called microservices,

59
00:02:33,000 --> 00:02:35,006
running in a variety of containers and pods

60
00:02:35,006 --> 00:02:37,008
across a set of nodes.

61
00:02:37,008 --> 00:02:39,008
Kubernetes handles running the containers

62
00:02:39,008 --> 00:02:43,001
and moving them around on nodes for resilience and scaling.

63
00:02:43,001 --> 00:02:45,008
And it also handles the network connectivity

64
00:02:45,008 --> 00:02:49,008
between services and from outside the system.

65
00:02:49,008 --> 00:02:52,004
Because containers can be built quickly and easily

66
00:02:52,004 --> 00:02:55,006
from description files and carry their own environment

67
00:02:55,006 --> 00:02:57,006
along with them so that they can be run

68
00:02:57,006 --> 00:03:00,004
in development and production environments identically,

69
00:03:00,004 --> 00:03:03,002
they've become a popular base for application development,

70
00:03:03,002 --> 00:03:04,009
and they lend themselves very well

71
00:03:04,009 --> 00:03:07,000
to infrastructure as code.

