1
00:00:00,005 --> 00:00:03,001
- I've seen the future, and it doesn't have servers.

2
00:00:03,001 --> 00:00:04,008
- I declare shenanigans!

3
00:00:04,008 --> 00:00:06,004
Serverless still has servers

4
00:00:06,004 --> 00:00:08,000
under the hood. - Okay, okay, professor.

5
00:00:08,000 --> 00:00:11,007
- [Speaker] Serverless versus servers fight.

6
00:00:11,007 --> 00:00:14,000
- Okay, let's jump into it.

7
00:00:14,000 --> 00:00:17,005
Let's start by discussing the benefits of serverless.

8
00:00:17,005 --> 00:00:18,007
- Okay, fair enough.

9
00:00:18,007 --> 00:00:21,000
But where did you get that ridiculous hat?

10
00:00:21,000 --> 00:00:23,003
- Oh, yeah, this, this old thing?

11
00:00:23,003 --> 00:00:24,002
You like it?

12
00:00:24,002 --> 00:00:25,007
- No.

13
00:00:25,007 --> 00:00:28,007
- Serverless has three key benefits.

14
00:00:28,007 --> 00:00:31,005
First, scaling is handled by the provider.

15
00:00:31,005 --> 00:00:33,005
Second, it's pay for play.

16
00:00:33,005 --> 00:00:36,002
If your app isn't running, it isn't costing you anything.

17
00:00:36,002 --> 00:00:39,003
Third, you're no longer dealing with package management

18
00:00:39,003 --> 00:00:40,008
or OS updates.

19
00:00:40,008 --> 00:00:42,003
It's really a beautiful thing.

20
00:00:42,003 --> 00:00:43,009
- Okay, that's all true,

21
00:00:43,009 --> 00:00:46,008
but you're ignoring some of the downsides of serverless.

22
00:00:46,008 --> 00:00:49,000
I'll match you three for three.

23
00:00:49,000 --> 00:00:52,005
Each cloud vendor's platform works a little differently,

24
00:00:52,005 --> 00:00:54,006
but I'm not even going to count that as a downside.

25
00:00:54,006 --> 00:00:56,007
The big story is that each of them

26
00:00:56,007 --> 00:00:58,006
has the same three fundamental limitations

27
00:00:58,006 --> 00:01:02,003
that make some workloads just not suitable for serverless.

28
00:01:02,003 --> 00:01:06,003
First, big apps have long initial cold start times,

29
00:01:06,003 --> 00:01:09,009
which cause delays when calling infrequently used services.

30
00:01:09,009 --> 00:01:12,006
Second, functions have a runtime limit

31
00:01:12,006 --> 00:01:16,006
set by the cloud provider, like 15 minutes for AWS Lambda.

32
00:01:16,006 --> 00:01:18,003
So long running jobs don't work.

33
00:01:18,003 --> 00:01:21,000
And there's also some not well advertised limits

34
00:01:21,000 --> 00:01:24,007
like the number of parallel Lambda executions you can have

35
00:01:24,007 --> 00:01:25,009
in an AWS account.

36
00:01:25,009 --> 00:01:28,003
And then third, serverless invocations

37
00:01:28,003 --> 00:01:31,004
are relatively pretty expensive.

38
00:01:31,004 --> 00:01:33,000
If you're running a lot of executions,

39
00:01:33,000 --> 00:01:35,000
it can turn out to cost a lot more

40
00:01:35,000 --> 00:01:37,002
than running a dedicated service yourself.

41
00:01:37,002 --> 00:01:39,009
- Well, I think you're at least partially right

42
00:01:39,009 --> 00:01:40,008
about the cost.

43
00:01:40,008 --> 00:01:43,002
Unless you're running your own serverless platform

44
00:01:43,002 --> 00:01:45,005
like K Native on top of Kubernetes,

45
00:01:45,005 --> 00:01:48,003
but then you're doing all the work to running yourself.

46
00:01:48,003 --> 00:01:49,006
So, you know.

47
00:01:49,006 --> 00:01:51,002
- Okay, so it's settled.

48
00:01:51,002 --> 00:01:53,005
- Well, not so fast there, Ernest.

49
00:01:53,005 --> 00:01:54,008
I'll give you that.

50
00:01:54,008 --> 00:01:57,005
But your other points about restrictions and limitations

51
00:01:57,005 --> 00:01:59,002
are just facts of computing.

52
00:01:59,002 --> 00:02:01,008
Not every workload fits on every platform,

53
00:02:01,008 --> 00:02:04,002
but there's often ways to get more mileage

54
00:02:04,002 --> 00:02:05,009
out of serverless in these cases.

55
00:02:05,009 --> 00:02:07,006
You know, very large apps

56
00:02:07,006 --> 00:02:10,004
may not be best for serverless web services,

57
00:02:10,004 --> 00:02:12,006
but caching and asynchronous responses

58
00:02:12,006 --> 00:02:15,002
can often improve cold start experiences.

59
00:02:15,002 --> 00:02:18,006
Long running apps may be decomposed into steps,

60
00:02:18,006 --> 00:02:20,004
using step functions,

61
00:02:20,004 --> 00:02:23,004
and apps that have many concurrent executions

62
00:02:23,004 --> 00:02:25,005
may not be the best cost model,

63
00:02:25,005 --> 00:02:27,004
but it takes you quite a while to get there.

64
00:02:27,004 --> 00:02:30,003
So you can defer the cost of a more complex solution

65
00:02:30,003 --> 00:02:32,008
til the time comes that you really need it.

66
00:02:32,008 --> 00:02:35,002
- Okay, well, since you seem so sure

67
00:02:35,002 --> 00:02:37,002
of handling the downsides of serverless,

68
00:02:37,002 --> 00:02:40,005
why don't you tell us more about why it's so great?

69
00:02:40,005 --> 00:02:41,003
- Yeah, sure.

70
00:02:41,003 --> 00:02:43,009
Well, let's start with how people are using it.

71
00:02:43,009 --> 00:02:45,004
In fact, in the last video,

72
00:02:45,004 --> 00:02:48,005
I showed how you had built out an entire application

73
00:02:48,005 --> 00:02:51,002
through linking a series of serverless functions

74
00:02:51,002 --> 00:02:54,001
and cloud services, and that was pretty cool.

75
00:02:54,001 --> 00:02:55,000
- Thanks.

76
00:02:55,000 --> 00:02:57,003
I mean, that must be some other Earnest.

77
00:02:57,003 --> 00:03:00,003
- There's only room for one Earnest in my life.

78
00:03:00,003 --> 00:03:03,007
I often advise that before people

79
00:03:03,007 --> 00:03:05,004
undertake a full serverless approach,

80
00:03:05,004 --> 00:03:08,002
they could transition just one part of their application

81
00:03:08,002 --> 00:03:10,007
or stack to serverless by looking for places

82
00:03:10,007 --> 00:03:13,004
where they're handling events or processing queues

83
00:03:13,004 --> 00:03:16,009
or using admin scripts, creating an API,

84
00:03:16,009 --> 00:03:19,003
or maybe even using HTTP traffic

85
00:03:19,003 --> 00:03:21,002
like single page web applications.

86
00:03:21,002 --> 00:03:22,006
- That makes sense.

87
00:03:22,006 --> 00:03:25,000
I learned that you can do a lot with serverless.

88
00:03:25,000 --> 00:03:26,003
Oh wait, whose side am I on?

89
00:03:26,003 --> 00:03:27,008
That's right, don't take my server.

90
00:03:27,008 --> 00:03:31,001
- Okay, Ernest, here is something for you to consider.

91
00:03:31,001 --> 00:03:32,005
When you have a server,

92
00:03:32,005 --> 00:03:36,000
whether it be a cloud VM or actual real hardware,

93
00:03:36,000 --> 00:03:38,003
or even a Kubernetes pod or node,

94
00:03:38,003 --> 00:03:39,008
what is it doing most of the time?

95
00:03:39,008 --> 00:03:41,001
- Well, most of the time,

96
00:03:41,001 --> 00:03:42,006
it's running my application, well,

97
00:03:42,006 --> 00:03:44,007
and a bunch of other stuff.

98
00:03:44,007 --> 00:03:45,007
- Bingo.

99
00:03:45,007 --> 00:03:48,002
One of the best reasons to use serverless

100
00:03:48,002 --> 00:03:50,004
is that you have more direct visibility

101
00:03:50,004 --> 00:03:53,002
of what resources your app actually uses,

102
00:03:53,002 --> 00:03:56,000
not mixed in with a bunch of other plumbing.

103
00:03:56,000 --> 00:03:58,003
And an underappreciated aspect to this

104
00:03:58,003 --> 00:04:00,009
is that for the first time in our industry,

105
00:04:00,009 --> 00:04:03,003
performance improvements and enhancements,

106
00:04:03,003 --> 00:04:05,005
they can be directly tied to cost,

107
00:04:05,005 --> 00:04:07,008
without having to use an interpretive model.

108
00:04:07,008 --> 00:04:10,008
With you being a longtime web performance expert,

109
00:04:10,008 --> 00:04:12,008
I think you'd have to love that.

110
00:04:12,008 --> 00:04:15,003
- Well, he got me with that one.

111
00:04:15,003 --> 00:04:21,000
Where's my hat?

112
00:04:21,000 --> 00:04:23,000
- You know, it looks really good on you.

113
00:04:23,000 --> 00:04:24,006
- Join us in the next section,

114
00:04:24,006 --> 00:04:27,006
where we discuss how to take all this infrastructure

115
00:04:27,006 --> 00:04:30,000
we've been talking about and codify it.

