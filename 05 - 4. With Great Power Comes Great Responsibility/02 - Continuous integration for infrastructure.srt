1
00:00:00,004 --> 00:00:03,003
- In this video, we'll talk about the pipeline you'll set up

2
00:00:03,003 --> 00:00:04,007
for your systems to take them

3
00:00:04,007 --> 00:00:08,003
from code to artifacts to running system.

4
00:00:08,003 --> 00:00:11,002
Here's an illustration of a continuous delivery flow

5
00:00:11,002 --> 00:00:14,000
where code gets checked in, built,

6
00:00:14,000 --> 00:00:16,003
goes through successive levels of testing

7
00:00:16,003 --> 00:00:19,004
and finally gets released to your production environment.

8
00:00:19,004 --> 00:00:21,008
But why do you want to do this?

9
00:00:21,008 --> 00:00:24,009
Well, this process does a couple of things.

10
00:00:24,009 --> 00:00:27,003
First of all, it isolates changes.

11
00:00:27,003 --> 00:00:29,002
If you check in small batches of changes

12
00:00:29,002 --> 00:00:31,002
and build and test each one,

13
00:00:31,002 --> 00:00:33,005
you know when something goes wrong.

14
00:00:33,005 --> 00:00:36,005
It also lets you trace back a specific deployment

15
00:00:36,005 --> 00:00:40,001
to a specific build, to a specific code change as opposed

16
00:00:40,001 --> 00:00:44,004
to having to make any changes in the environment by hand.

17
00:00:44,004 --> 00:00:46,001
The day of live code changes

18
00:00:46,001 --> 00:00:49,000
on production servers is mostly over

19
00:00:49,000 --> 00:00:51,008
and so it should be with infrastructure.

20
00:00:51,008 --> 00:00:54,001
So how do you do this?

21
00:00:54,001 --> 00:00:56,007
First, you'll want to use source control.

22
00:00:56,007 --> 00:00:59,003
If you're not experienced with it, it's easy.

23
00:00:59,003 --> 00:01:01,006
We'll use Git in this course, and there's courses

24
00:01:01,006 --> 00:01:04,003
in the library to show you the basics of Git.

25
00:01:04,003 --> 00:01:07,004
Every time you check in code, a trigger fires

26
00:01:07,004 --> 00:01:09,005
and the build system goes to test

27
00:01:09,005 --> 00:01:12,003
and build and test it some more.

28
00:01:12,003 --> 00:01:13,005
Like application code,

29
00:01:13,005 --> 00:01:16,001
you'll want to have tests for your infrastructure code

30
00:01:16,001 --> 00:01:18,003
and the actual running infrastructure.

31
00:01:18,003 --> 00:01:20,003
It's such an important topic itself

32
00:01:20,003 --> 00:01:22,007
that we'll cover it in depth in the next video.

33
00:01:22,007 --> 00:01:24,001
And then the build.

34
00:01:24,001 --> 00:01:26,005
Code usually gets compiled, parsed

35
00:01:26,005 --> 00:01:29,003
or even bundled up into what we call artifacts.

36
00:01:29,003 --> 00:01:32,004
Artifacts are versioned, unchanging sets of code

37
00:01:32,004 --> 00:01:34,006
that get tested and deployed.

38
00:01:34,006 --> 00:01:35,008
For infrastructure artifacts,

39
00:01:35,008 --> 00:01:39,001
you usually see ZIP files, Debs, RPMs,

40
00:01:39,001 --> 00:01:42,009
Docker images, AMIs, or VMs.

41
00:01:42,009 --> 00:01:44,007
There are some very cool new options

42
00:01:44,007 --> 00:01:46,001
worth checking out though,

43
00:01:46,001 --> 00:01:48,006
like the Nix package manager that's designed

44
00:01:48,006 --> 00:01:51,008
to let you make declarative reproducible packages

45
00:01:51,008 --> 00:01:55,000
and web assembly or WASim, a format

46
00:01:55,000 --> 00:01:57,002
for a stack-based virtual machine

47
00:01:57,002 --> 00:01:59,000
that's a portable compilation target

48
00:01:59,000 --> 00:02:01,005
for all kinds of languages.

49
00:02:01,005 --> 00:02:03,006
One of the co-founders of Docker says

50
00:02:03,006 --> 00:02:05,002
they wouldn't have needed to create Docker

51
00:02:05,002 --> 00:02:07,008
if WASim had existed back then.

52
00:02:07,008 --> 00:02:09,007
There's no single right answer.

53
00:02:09,007 --> 00:02:12,005
They all have advantages or are necessary

54
00:02:12,005 --> 00:02:14,006
for different scenarios,

55
00:02:14,006 --> 00:02:17,004
but deciding what your artifacts are

56
00:02:17,004 --> 00:02:20,009
and how to manage and version them is very important.

57
00:02:20,009 --> 00:02:22,002
Here's a reference architecture

58
00:02:22,002 --> 00:02:24,002
of a DevOps service delivery platform

59
00:02:24,002 --> 00:02:27,000
showing the flow from source repo to build

60
00:02:27,000 --> 00:02:31,000
and then to artifact repo, and then out into production.

61
00:02:31,000 --> 00:02:34,004
You may have multiple layers of artifacts, and that's okay.

62
00:02:34,004 --> 00:02:36,008
For example, one team might build everything

63
00:02:36,008 --> 00:02:40,002
into OS packages for their Java and Python applications

64
00:02:40,002 --> 00:02:42,009
and leverage built-in dependency management.

65
00:02:42,009 --> 00:02:46,004
Then as a second layer, they might build VM images

66
00:02:46,004 --> 00:02:49,008
and AMIs using Packer and build Docker images directly

67
00:02:49,008 --> 00:02:52,004
with Dockerfiles containing applications deployed

68
00:02:52,004 --> 00:02:54,004
from that first tier of artifacts.

69
00:02:54,004 --> 00:02:56,006
And this is usually controlled

70
00:02:56,006 --> 00:02:59,007
through a build system like Jenkins or Bamboo

71
00:02:59,007 --> 00:03:01,008
or something similar.

72
00:03:01,008 --> 00:03:03,002
To store artifacts,

73
00:03:03,002 --> 00:03:05,005
it's common to use Artifactory

74
00:03:05,005 --> 00:03:08,002
or Nexus or a container registry

75
00:03:08,002 --> 00:03:11,002
but I've seen it all with some people just keeping it simple

76
00:03:11,002 --> 00:03:13,004
and using a cloud storage bucket.

77
00:03:13,004 --> 00:03:15,006
The last step is deployment.

78
00:03:15,006 --> 00:03:18,003
Here's an example of that previous artifact flow

79
00:03:18,003 --> 00:03:21,004
with a specific tooling that Ernest used over at AlienVault

80
00:03:21,004 --> 00:03:23,009
for their continuous integration pipeline.

81
00:03:23,009 --> 00:03:25,001
AppCode and Java

82
00:03:25,001 --> 00:03:28,001
and Bash, infrastructure code and CloudFormation

83
00:03:28,001 --> 00:03:31,005
and Puppet all checked in to Bitbucket source control,

84
00:03:31,005 --> 00:03:35,003
and using Maven and the Bamboo CI product.

85
00:03:35,003 --> 00:03:37,004
Artifacts such as AMIs,

86
00:03:37,004 --> 00:03:42,001
VMware images and Debian packages go into Artifactory.

87
00:03:42,001 --> 00:03:44,003
And then a continuous deployment job

88
00:03:44,003 --> 00:03:47,005
in Bamboo runs the Rundeck orchestration system

89
00:03:47,005 --> 00:03:51,003
to deploy production via Puppet and Terraform.

90
00:03:51,003 --> 00:03:54,001
All together, that formed a comprehensive app

91
00:03:54,001 --> 00:03:56,007
and infrastructure service delivery solution.

92
00:03:56,007 --> 00:03:57,009
And that's the basics

93
00:03:57,009 --> 00:04:01,000
of continuous integration for infrastructure as code.

