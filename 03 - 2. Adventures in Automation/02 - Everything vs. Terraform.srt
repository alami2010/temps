1
00:00:00,007 --> 00:00:02,000
- There are many ways to create

2
00:00:02,000 --> 00:00:04,003
your network infrastructure from code.

3
00:00:04,003 --> 00:00:07,008
- But there's only one right one, Terraform.

4
00:00:07,008 --> 00:00:09,006
- [Narrator] Everything versus Terraform.

5
00:00:09,006 --> 00:00:11,001
Fight.

6
00:00:11,001 --> 00:00:12,009
- Ah, come on Ernest.

7
00:00:12,009 --> 00:00:16,002
We know that there's never one silver bullet in tech.

8
00:00:16,002 --> 00:00:17,009
- Well, I'm not hunting werewolves,

9
00:00:17,009 --> 00:00:19,004
until this weekend at least.

10
00:00:19,004 --> 00:00:21,001
I'm building infrastructure

11
00:00:21,001 --> 00:00:23,000
and Terraform's the way to do it.

12
00:00:23,000 --> 00:00:25,008
It works across all the major cloud providers.

13
00:00:25,008 --> 00:00:28,008
- But what about the cloud provider specific solutions?

14
00:00:28,008 --> 00:00:32,008
Isn't AWS cloud formation optimized for AWS

15
00:00:32,008 --> 00:00:36,004
and Microsoft Arm templates optimized for Azure

16
00:00:36,004 --> 00:00:39,006
or at least they support all their new features?

17
00:00:39,006 --> 00:00:41,000
- So, not really.

18
00:00:41,000 --> 00:00:44,004
Besides those solutions being cloud provider specific,

19
00:00:44,004 --> 00:00:45,009
they're made by different teams

20
00:00:45,009 --> 00:00:48,000
inside those large organizations

21
00:00:48,000 --> 00:00:50,008
and they lag their own feature releases too.

22
00:00:50,008 --> 00:00:52,009
Since all cloud features are API driven

23
00:00:52,009 --> 00:00:54,009
a third party module can get put together

24
00:00:54,009 --> 00:00:57,007
as quickly as an in-house one in practice.

25
00:00:57,007 --> 00:00:59,007
There's a huge Terraform community

26
00:00:59,007 --> 00:01:02,003
contributing to the public Terraform registry.

27
00:01:02,003 --> 00:01:05,005
So I'd venture to say Terraform support for each cloud

28
00:01:05,005 --> 00:01:08,002
is as good as the cloud providers itself.

29
00:01:08,002 --> 00:01:10,004
- Okay, well, but what about doing it

30
00:01:10,004 --> 00:01:13,000
imperatively in code instead of using a tool

31
00:01:13,000 --> 00:01:17,007
like Bodo or using AWS's own CDK?

32
00:01:17,007 --> 00:01:18,005
- I don't know, man.

33
00:01:18,005 --> 00:01:20,002
I've never been a big fan of that.

34
00:01:20,002 --> 00:01:22,007
Not only do you need to rewrite a bunch of code

35
00:01:22,007 --> 00:01:25,007
that an infrastructures code framework already has,

36
00:01:25,007 --> 00:01:27,007
you're biting off a lot of complexity

37
00:01:27,007 --> 00:01:29,004
and error prone fiddling.

38
00:01:29,004 --> 00:01:32,009
Driving infrastructure from app code has its place.

39
00:01:32,009 --> 00:01:35,004
For example, starting per user workstations

40
00:01:35,004 --> 00:01:39,000
or something where you really need fine and instant control.

41
00:01:39,000 --> 00:01:40,009
That's definitely not your core network.

42
00:01:40,009 --> 00:01:42,004
You want your base infrastructure

43
00:01:42,004 --> 00:01:45,004
to be well defined and repeatable.

44
00:01:45,004 --> 00:01:46,007
- I've heard that you have to think about

45
00:01:46,007 --> 00:01:49,007
how to store your infrastructure state in Terraform, though.

46
00:01:49,007 --> 00:01:52,009
You don't want to just keep that on an operator's desktop.

47
00:01:52,009 --> 00:01:54,008
- True. Well, cloud solutions

48
00:01:54,008 --> 00:01:57,008
use their own API fabric as state storage.

49
00:01:57,008 --> 00:02:01,001
In Terraform, you need to choose where to store your state

50
00:02:01,001 --> 00:02:03,003
but it's easy to store it in any database

51
00:02:03,003 --> 00:02:06,005
or an encrypted inversion controlled S3 bucket.

52
00:02:06,005 --> 00:02:09,007
- But aren't you being all cloud-centric here?

53
00:02:09,007 --> 00:02:11,007
What about on-prem hardware?

54
00:02:11,007 --> 00:02:13,005
- So that's a fair point.

55
00:02:13,005 --> 00:02:15,008
You can't easily do base infrastructure

56
00:02:15,008 --> 00:02:18,005
using pure Terraform on bare metal.

57
00:02:18,005 --> 00:02:20,007
There's some experimentation in that direction

58
00:02:20,007 --> 00:02:23,000
but I personally would absolutely use something

59
00:02:23,000 --> 00:02:26,007
like digital rebar that handles pixie booting instead.

60
00:02:26,007 --> 00:02:28,007
- So, I gotcha.

61
00:02:28,007 --> 00:02:31,000
- You would have if Rob Hirschfeld

62
00:02:31,000 --> 00:02:32,007
and the smart folks at RackN

63
00:02:32,007 --> 00:02:37,004
hadn't then made a digital rebar provisioner for Terraform.

64
00:02:37,004 --> 00:02:38,007
Checkmate.

65
00:02:38,007 --> 00:02:39,007
- Ah, snap.

66
00:02:39,007 --> 00:02:41,005
Okay, I guess you're right.

67
00:02:41,005 --> 00:02:45,004
It's a good thing that using Terraform at scale

68
00:02:45,004 --> 00:02:48,001
doesn't result in a hell of core Terraform

69
00:02:48,001 --> 00:02:50,003
and module version dependencies.

70
00:02:50,003 --> 00:02:52,006
- Who told you that? Who told you that?

71
00:02:52,006 --> 00:02:54,002
- You did.

72
00:02:54,002 --> 00:02:56,006
- Okay. Well that that's true.

73
00:02:56,006 --> 00:02:59,007
Complex infrastructures make for complex Terraform.

74
00:02:59,007 --> 00:03:01,009
You need to compensate by breaking it up.

75
00:03:01,009 --> 00:03:04,005
I've tried various packaging dependencies

76
00:03:04,005 --> 00:03:06,008
and containerizing schemes.

77
00:03:06,008 --> 00:03:09,009
Terraform can be too much for a simple job.

78
00:03:09,009 --> 00:03:12,005
- I do see why you recommend Terraform.

79
00:03:12,005 --> 00:03:15,003
You know, for so many cases it seems to have become

80
00:03:15,003 --> 00:03:16,008
the most popular choice out there.

81
00:03:16,008 --> 00:03:19,008
It has a lot of community and commercial support

82
00:03:19,008 --> 00:03:22,006
but I have to admit, I still miss the provisioning framework

83
00:03:22,006 --> 00:03:24,007
that we built together back in the day.

84
00:03:24,007 --> 00:03:27,006
It built cloud infrastructure, but also did app deployment

85
00:03:27,006 --> 00:03:31,000
and rationalized runtime service dependencies.

86
00:03:31,000 --> 00:03:34,004
- Well, I agree, and the one drawback I find in Terraform

87
00:03:34,004 --> 00:03:38,001
is the common flaw in all the available solutions, really.

88
00:03:38,001 --> 00:03:39,005
There's a sharp separation

89
00:03:39,005 --> 00:03:41,007
between infrastructure provisioning

90
00:03:41,007 --> 00:03:45,008
and application deployment and runtime orchestration tools

91
00:03:45,008 --> 00:03:48,003
largely based on historical ops team

92
00:03:48,003 --> 00:03:50,008
versus dev team responsibilities.

93
00:03:50,008 --> 00:03:53,004
And that's not very DevOps.

94
00:03:53,004 --> 00:03:55,000
- Double snap.

