1
00:00:00,005 --> 00:00:02,004
- [Instructor] Time for some fun using Terraform

2
00:00:02,004 --> 00:00:04,007
for infrastructure provisioning.

3
00:00:04,007 --> 00:00:07,004
First, let's look in our Amazon console.

4
00:00:07,004 --> 00:00:10,008
Oh, look, under EC2, I've got a bunch of running servers

5
00:00:10,008 --> 00:00:13,009
prepared to become part of a Kubernetes cluster.

6
00:00:13,009 --> 00:00:15,009
So, you've got some running cloud servers.

7
00:00:15,009 --> 00:00:19,002
"So what?" you ask. We did that in the previous lab.

8
00:00:19,002 --> 00:00:22,002
Well, the spiffy thing here is that these are all generated

9
00:00:22,002 --> 00:00:25,004
from infrastructure as code using Terraform.

10
00:00:25,004 --> 00:00:27,007
Let's go look at that Terraform code.

11
00:00:27,007 --> 00:00:29,003
I've forked an open-source project

12
00:00:29,003 --> 00:00:31,009
called Cube Spray to do this,

13
00:00:31,009 --> 00:00:35,004
and down in its contrib/terraform/aws directory,

14
00:00:35,004 --> 00:00:36,003
it has the Terraform code

15
00:00:36,003 --> 00:00:40,002
to make an entire Kubernetes cluster in Amazon.

16
00:00:40,002 --> 00:00:44,009
So the first key item here is the terraform.tfvars file,

17
00:00:44,009 --> 00:00:48,000
and this holds common configuration parameters

18
00:00:48,000 --> 00:00:49,004
that you might want to tweak

19
00:00:49,004 --> 00:00:51,009
in a normal Kubernetes installation.

20
00:00:51,009 --> 00:00:57,001
Note here that we've got 3 workers running.

21
00:00:57,001 --> 00:01:00,001
Then the primary Terraform code

22
00:01:00,001 --> 00:01:03,006
is in create-infrastructure.tf.

23
00:01:03,006 --> 00:01:07,005
As you can see, it details the parts of the infrastructure

24
00:01:07,005 --> 00:01:11,004
to create the VPC, the load balancer,

25
00:01:11,004 --> 00:01:14,000
starts getting into the servers.

26
00:01:14,000 --> 00:01:16,008
Now, you'll note here that it's pulling in variables

27
00:01:16,008 --> 00:01:22,008
from our tfvars file,

28
00:01:22,008 --> 00:01:25,002
and then finally, we get to the piece

29
00:01:25,002 --> 00:01:28,008
that creates our workers.

30
00:01:28,008 --> 00:01:31,005
It also refers to specific modules

31
00:01:31,005 --> 00:01:33,007
that hold more Terraform code.

32
00:01:33,007 --> 00:01:36,009
So as you could see down here in the modules directory,

33
00:01:36,009 --> 00:01:39,006
there are little submodules of Terraform

34
00:01:39,006 --> 00:01:41,004
to do specific things.

35
00:01:41,004 --> 00:01:46,002
This one creates the VPC,

36
00:01:46,002 --> 00:01:48,007
and so it has all of the little bitty details

37
00:01:48,007 --> 00:01:53,002
that are required to set up the networking in AWS.

38
00:01:53,002 --> 00:01:55,005
This may seem daunting at first,

39
00:01:55,005 --> 00:01:59,006
but there are a great many preexisting Terraform modules

40
00:01:59,006 --> 00:02:03,009
out in the public Terraform registry,

41
00:02:03,009 --> 00:02:08,002
including ones to perform basic building blocks like this.

42
00:02:08,002 --> 00:02:10,006
Now, spinning all this up takes a little while,

43
00:02:10,006 --> 00:02:13,000
so I've already run this Terraform.

44
00:02:13,000 --> 00:02:15,003
Let's go back and see what it created again

45
00:02:15,003 --> 00:02:17,008
in the AWS console.

46
00:02:17,008 --> 00:02:20,002
As you can see, there's a set of servers,

47
00:02:20,002 --> 00:02:24,000
a bastion, 3 master nodes, 3 worker nodes,

48
00:02:24,000 --> 00:02:26,008
along with all of the associated networking

49
00:02:26,008 --> 00:02:29,003
and security configuration.

50
00:02:29,003 --> 00:02:30,005
Now, let's go to the system

51
00:02:30,005 --> 00:02:35,007
that I downloaded this code to and ran it on.

52
00:02:35,007 --> 00:02:36,008
There, you can see the code

53
00:02:36,008 --> 00:02:39,001
that I showed you in the previous bit.

54
00:02:39,001 --> 00:02:40,004
Now, the one difference here

55
00:02:40,004 --> 00:02:43,004
is that since I've already run the Terraform,

56
00:02:43,004 --> 00:02:49,003
it has something called a tfstate file.

57
00:02:49,003 --> 00:02:52,001
The state file contains all of the details

58
00:02:52,001 --> 00:02:55,001
of what it actually created.

59
00:02:55,001 --> 00:02:57,006
So every single asset that it made,

60
00:02:57,006 --> 00:03:01,006
it has all of the AWS details of what it did

61
00:03:01,006 --> 00:03:04,001
and what it believes are running.

62
00:03:04,001 --> 00:03:06,001
You can also store this state remotely

63
00:03:06,001 --> 00:03:08,002
in databases or cloud storage.

64
00:03:08,002 --> 00:03:11,001
You always want to do that for a production system,

65
00:03:11,001 --> 00:03:15,008
but for this, I'm just saving it here in our code directory.

66
00:03:15,008 --> 00:03:19,006
So, let's change something and run some Terraform.

67
00:03:19,006 --> 00:03:23,006
Right now, we have 3 Kubernetes workers

68
00:03:23,006 --> 00:03:25,009
that are all medium-sized instances,

69
00:03:25,009 --> 00:03:31,003
as defined in our tfvars file, but I need more power,

70
00:03:31,003 --> 00:03:33,000
so I'm going to add another server

71
00:03:33,000 --> 00:03:36,003
to increase the cluster to 4 worker nodes.

72
00:03:36,003 --> 00:03:40,002
So all we have to do is edit this tfvars file,

73
00:03:40,002 --> 00:03:43,003
change the number of workers to 4,

74
00:03:43,003 --> 00:03:45,002
and we're going to save it.

75
00:03:45,002 --> 00:03:48,004
Now, the first thing that we're going to do

76
00:03:48,004 --> 00:03:51,003
is run terraform validate.

77
00:03:51,003 --> 00:03:52,009
That is going to look at the code

78
00:03:52,009 --> 00:03:55,004
and make sure it all looks well formed

79
00:03:55,004 --> 00:03:57,009
and we didn't make any terrible mistakes.

80
00:03:57,009 --> 00:04:00,009
It tells us the configuration is valid.

81
00:04:00,009 --> 00:04:05,007
So then we're going to run terraform plan.

82
00:04:05,007 --> 00:04:11,007
Terraform plan goes out and actually dry runs this code

83
00:04:11,007 --> 00:04:13,004
and comes back and tells you

84
00:04:13,004 --> 00:04:16,007
exactly what it thinks it's going to change.

85
00:04:16,007 --> 00:04:22,009
So here,

86
00:04:22,009 --> 00:04:27,006
you can see that the previous servers,

87
00:04:27,006 --> 00:04:30,000
it's not going to touch.

88
00:04:30,000 --> 00:04:36,004
It's going to create a new server, Kubernetes worker 3,

89
00:04:36,004 --> 00:04:39,002
and then it's going to change the inventory file

90
00:04:39,002 --> 00:04:41,005
that it uses to keep track of things.

91
00:04:41,005 --> 00:04:42,009
So this is how you verify

92
00:04:42,009 --> 00:04:44,007
that it's going to make the change you want,

93
00:04:44,007 --> 00:04:46,005
and it's not going to go affect anything

94
00:04:46,005 --> 00:04:49,001
that you don't want it to.

95
00:04:49,001 --> 00:04:54,009
So all we have to do is run terraform apply,

96
00:04:54,009 --> 00:04:57,003
so, prepares to make the change,

97
00:04:57,003 --> 00:04:59,005
then it's going to show me the plan again

98
00:04:59,005 --> 00:05:04,005
and ask me if I am sure, and I say yes.

99
00:05:04,005 --> 00:05:07,007
And away it goes.

100
00:05:07,007 --> 00:05:10,006
Back over here in the AWS console,

101
00:05:10,006 --> 00:05:14,005
you can see that worker 3 has already started

102
00:05:14,005 --> 00:05:16,005
and is initializing,

103
00:05:16,005 --> 00:05:20,002
so we have a newly larger Kubernetes cluster.

104
00:05:20,002 --> 00:05:22,006
Now, back at the command line,

105
00:05:22,006 --> 00:05:30,000
let's run terraform plan again.

106
00:05:30,000 --> 00:05:33,004
It says our infrastructure matches the configuration,

107
00:05:33,004 --> 00:05:37,002
so our specification and reality line up.

108
00:05:37,002 --> 00:05:47,001
So let's check in the tfstate file.

109
00:05:47,001 --> 00:05:50,005
Sure enough, there is worker number 3,

110
00:05:50,005 --> 00:05:53,008
with all of the details about

111
00:05:53,008 --> 00:05:57,007
how it got set up inside of AWS.

112
00:05:57,007 --> 00:06:00,004
And that's the real power of infrastructure as code.

113
00:06:00,004 --> 00:06:02,005
You can spec out exactly what you want,

114
00:06:02,005 --> 00:06:05,008
have others review it, run it in a development environment,

115
00:06:05,008 --> 00:06:07,005
and then run it in your production environment

116
00:06:07,005 --> 00:06:09,006
with no room for manual error,

117
00:06:09,006 --> 00:06:12,002
both to create your infrastructure in the first place,

118
00:06:12,002 --> 00:06:15,000
but then also to precisely change it over time.

